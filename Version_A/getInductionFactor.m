function [torque, thrust, a, alpha_n] = getInductionFactor(geom,oper,tube,polarFunc)

% 1. Guess a value for a
% 2. Calculate local velocity, angle of attack, lift, drag coeffs
% 3. Calculate thrust coefficient derived from these for coefficients
% 4. Calculate trust coefficient based on actuator disc/momentum theory
% 5. If thrust coeffs are not within tolerance, adjust a



% Inputs


% F_tol = tube.Ftol; % tolerance of percent difference of forces


% Fdiff = 10;
% adiff = 0.01; % Amount to change a by initially
% asw = 1; % Determines if direction was changed for shooting method
% a = a_init;

options.TolX = tube.Ftol;
a = fminsearch(@(x)get_F(x,geom,oper,tube),tube.a_init,options);



H = geom.H; % turbine height
R = geom.R; % turbine radius
c = geom.c; % turbine chord
N = geom.N; % Number of blades
alpha_p = geom.alpha_p; % Preset pitch angle

omega = oper.omega; % turbine rotation rate, m/s
U_inf = oper.U_inf; % freestream vel coming into tube
mu = oper.mu; % Dynamic viscosity
rho = oper.rho; % fluid density
theta = tube.theta; % center of arc of streamtube
dtheta = tube.dtheta; % Sweep of streamtube arc

U = (1-a)*U_inf; % Freesteam vel that the blade sees
lambda = omega*R/U; % Local tip speed ratio
alpha_n = -atan2(sin(theta),lambda+cos(theta)) + alpha_p;
U_n = U*sqrt(lambda^2+2*lambda*cos(theta)+1);
Re_n = U_n*c*rho/mu;

[CL,CD] = polarFunc(alpha_n,Re_n); % Get lift/drag coeffs
FL = 0.5*rho*U_n^2*c*H*CL; % Lift force generate by blade
FD = 0.5*rho*U_n^2*c*H*CD; % Drag force generated by blade

FT = FL*sin(theta+alpha_n-alpha_p)-FD*cos(theta+alpha_n-alpha_p);

Fblade = -N*FT*dtheta/(2*pi);


thrust = Fblade;
Ftan = -FL*sin(alpha_p-alpha_n)-FD*cos(alpha_p-alpha_n); % Tangential force
torque = N*Ftan*R*dtheta/(2*pi); % Torque applied during streamtube




% while Fdiff > F_tol
%
%     U = (1-a)*U_inf; % Freesteam vel that the blade sees
%     lambda = omega*R/U; % Local tip speed ratio
%     alpha_n = -atan2(sin(theta),lambda+cos(theta)) + alpha_p;
%     U_n = U*sqrt(lambda^2+2*lambda*cos(theta)+1);
%     Re_n = U_n*c*rho/mu;
%
%     [CL,CD] = polarFunc(alpha_n,Re_n); % Get lift/drag coeffs
%     FL = 0.5*rho*U_n^2*c*H*CL; % Lift force generate by blade
%     FD = 0.5*rho*U_n^2*c*H*CD; % Drag force generated by blade
%
%     FT = FL*sin(theta+alpha_n-alpha_p)-FD*cos(theta+alpha_n-alpha_p);
%
%     Fblade = -N*FT*dtheta/(2*pi);
%
%     Factuation = 0.5*rho*H*R*dtheta*sin(theta)*(4*a*(1-a));
%
%     Fdiff = (Fblade - Factuation)/Fblade;
%
%     fprintf('Fdiff = %f\n',Fdiff)
%     if Fdiff < 0 && asw
%         asw = 0;
%     end
%
%     if ~asw
%         adiff = adiff/2;
%     end
%
%     fprintf('adiff = %f\n',adiff)
%
%     if Fdiff > 0
%         a = a + adiff;
%     else
%         a = a - adiff;
%     end
%
%     fprintf('a = %f\n',a)
%     % pause
%     Fdiff = abs(Fdiff);
% end




    function Fdiff = get_F(a,geom,oper,tube)
        
        H = geom.H; % turbine height
        R = geom.R; % turbine radius
        c = geom.c; % turbine chord
        N = geom.N; % Number of blades
        alpha_p = geom.alpha_p; % Preset pitch angle
        
        omega = oper.omega; % turbine rotation rate, m/s
        U_inf = oper.U_inf; % freestream vel coming into tube
        mu = oper.mu; % Dynamic viscosity
        rho = oper.rho; % fluid density
        theta = tube.theta; % center of arc of streamtube
        dtheta = tube.dtheta; % Sweep of streamtube arc
        
        U = (1-a)*U_inf; % Freesteam vel that the blade sees
        lambda = omega*R/U; % Local tip speed ratio
        alpha_n = -atan2(sin(theta),lambda+cos(theta)) + alpha_p;
        U_n = U*sqrt(lambda^2+2*lambda*cos(theta)+1);
        Re_n = U_n*c*rho/mu;
        
        [CL,CD] = polarFunc(alpha_n,Re_n); % Get lift/drag coeffs
        FL = 0.5*rho*U_n^2*c*H*CL; % Lift force generate by blade
        FD = 0.5*rho*U_n^2*c*H*CD; % Drag force generated by blade
        
        FT = FL*sin(theta+alpha_n-alpha_p)-FD*cos(theta+alpha_n-alpha_p);
        
        Fblade = -N*FT*dtheta/(2*pi);
        
        Factuation = 0.5*rho*H*R*dtheta*sin(theta)*(4*a*(1-a));
        
        Fdiff = abs(Fblade - Factuation)/Fblade;
    end




end






